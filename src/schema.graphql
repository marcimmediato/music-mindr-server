type Query {
  users(query: String): [User!]!
  artist(id: String): Artist!
  artists(query: String!): [Artist!]!
  album(id: String!): Album!
  albums(query: String!): [Album!]!
  track(id: String!): Track!
  tracks(query: String!): [Track!]!
}

type Mutation {
  createUser(data: CreateUserInput): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
}

type Artist {
  id: ID!
  name: String!
  albums: [Album]!
  #songs: [Song!]!
}

type Album {
  id: ID!
  name: String!
  artist: Artist!
  tracks: [Track!]!
}

type Track {
  id: ID!
  name: String!
  artist: Artist!
  album: Album!
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  mindrs: [Mindr!]!
  updatedAt: String!
  createdAt: String!
}

type Mindr {
  id: ID!
  user: User!
  spotifyId: String!
  type: String!
  name: String!
  artist: String!
  note: String
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}
